#include <stdio.h>
#include <math.h>

// Extended Euclidean Algorithm
int modInverse(int e, int phi) {
    int t = 0, newt = 1, r = phi, newr = e, quotient, temp;
    while (newr != 0) {
        quotient = r / newr;
        temp = newt;
        newt = t - quotient * newt;
        t = temp;
        temp = newr;
        newr = r - quotient * newr;
        r = temp;
    }
    if (r > 1) return -1; // No inverse
    if (t < 0) t += phi;
    return t;
}

// Try to factor n
void findPQ(int n, int *p, int *q) {
    for (int i = 2; i <= sqrt(n); i++) {
        if (n % i == 0) {
            *p = i;
            *q = n / i;
            return;
        }
    }
}

int main() {
    int e = 31, n = 3599, p, q;
    findPQ(n, &p, &q);
    int phi = (p - 1) * (q - 1);
    int d = modInverse(e, phi);

    printf("Given e = %d, n = %d\n", e, n);
    printf("Found p = %d, q = %d\n", p, q);
    printf("phi(n) = %d\n", phi);
    printf("Private key d = %d\n", d);

    return 0;
}
